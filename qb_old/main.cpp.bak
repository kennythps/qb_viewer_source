#include <stdio.h>
#include <vector>
#include <string>

// This is the standard fileheader
char file_header[3] = {0x01, 0x23, 0x16};
// This is the start of the descriptiontable (it includes the first +)
char dt_start[4] = {0x01, 0x24, 0x01, 0x2b};
char dt_next[2] = {0x00, 0x2b}; // this indicates a new word


char head[3];

long size = 0;
unsigned char *qb = NULL;

int pos = 0;
int dstart = 0;

using namespace std;

bool found = false;

//vector<string> dt_table;
vector<unsigned char*> dt_table;
vector<unsigned int> dt_id;
//char *tempch = NULL;
int i = 0;

/*#define SKIPEND {if(qb[pos] == 0x01 && qb[pos+1] == 0x16) pos++; pos++;}
#define ISEND (qb[pos] == 0x16 || (qb[pos] == 0x01 && qb[pos+1] == 0x16) || (qb[pos] == 0x07 && qb[pos+1] == 0x16))
#define IS_IDEF (qb[pos] == 0x07)

#define DEF_STRING	0x1b
#define DEF_INT1	0x1a
#define DEF_INT2	0x17

#define ISINT (qb[pos]==DEF_INT1 || qb[pos]==DEF_INT2)
#define ISSTR (qb[pos]==DEF_STRING)
#define ISDEF (qb[pos]==0x01 || qb[pos]==0x07)*/

// Get the next INT (or ID)
#define GetID() {ip = (unsigned int*)&qb[pos]; pos+=4;}
// Get and skip the next end
#define GetEnd() {while(qb[pos]!=0x16);pos++; pos++;}

char undef_id[128] = "<UNDEFINED ID>";

char *TextOf(unsigned int id);
unsigned int *ip = NULL;
int *dp = NULL;

int type = 0;
bool hasCall = false;

int main(int argc, char **argv)
{
	FILE *file = fopen("gamemenu_options.qb", "rb");
	if(!file) {
		printf("Couldn't open file!");
		goto eerr;
	}

	fread(head, 1, 3, file);
	if(memcmp(head, file_header, 3)) {
		printf("Not a valid qb-file!");
		goto eerr;
	}

	fseek(file, 0, SEEK_END);
	size = ftell(file) - 3;
	fseek(file, 3, SEEK_SET);
	qb = (unsigned char*)malloc(size);
	fread(qb, 1, size, file);
	fclose(file);
    
	while(pos < size && !found) {
		if(!memcmp(&qb[pos], dt_start, 4)) {
			found = true;
			dstart = pos-1;
		}
		pos++;
	}

	pos = dstart;
	dt_table.clear();
	dt_id.clear();
	while(pos < size) {
		if(qb[pos] == '+') {
			pos++;
			dt_id.push_back(*((unsigned int*)(&qb[pos]))); pos += 4;
			dt_table.push_back(&qb[pos]);
			while(qb[pos]) pos++;	// skip string
			pos++;
		} else pos++;
	}

	pos = 0;
	while(pos < dstart) {
		GetID();
		
		if(!strcmp(TextOf(*ip), "id")) {
			printf("id");
_id_arg_start:
			if(qb[pos] == 0x16) pos++;
			else if(qb[pos] == 0x07) {
				pos++;
				printf(" :=");
				goto _id_arg_start;
			} else {
				printf(" .add =");
				while(qb[pos] != 0x16) { // print out
					if(qb[pos] < 0x10) printf(" 0%x", qb[pos]);
					else printf(" %x", qb[pos]);
					pos++;
				}
			}
			if(qb[pos] == 0x16) pos++;
			GetID();
			printf(" %s", TextOf(*ip));
		} else {
			printf("%s", TextOf(*ip));
		}

		if(qb[pos] != 0x16) {
			if(qb[pos] == 0x07)			// Definition
			{
				pos++;
				if(qb[pos] == 0x1b) {								// String: [length4] text 0
					pos++;
					GetID();
					printf(" :s= \"%s\" (%i)", &qb[pos], *ip);
					while(qb[pos]) pos++;	// skip text
					pos++;					// skip null terminator
				} else if(qb[pos] == 0x1a || qb[pos] == 0x17) {		// INT
					pos++;
					GetID();
					printf(" :i= %x (%i)", *ip, *ip);
				}
			}
			if(qb[pos] != 0x16)			// print data
			{
				printf(" .data =");
				while(qb[pos] != 0x16) { // print out
					/*if( (qb[pos] == 0x17 || qb[pos] == 0x1a) && 
						(qb[pos+1]!=0x16 && qb[pos+2]!=0x16 && qb[pos+3]!=0x16 && qb[pos+4]!=0x16)
						)
					{
						pos++;
						GetID();
						printf(" :i= %i");
					} else {*/
						if(qb[pos] < 0x10) printf(" 0%x", qb[pos]);
						else printf(" %x", qb[pos]);
						pos++;
					//}
				}
			}
		}

		if(qb[pos] == 0x16) pos++;
		else {
			printf(".add =");
			while(qb[pos] != 0x16) { // print out
				if(qb[pos] < 0x10) printf(" 0%x", qb[pos]);
				else printf(" %x", qb[pos]);
				pos++;
			}
		}
		printf("\n");
	}

	free(qb);
    return 0;

eerr:
	//system("pause");
	if(qb) free(qb);
	return 1;
}

char *TextOf(unsigned int id)
{
	int i = 0;
	for(; i < dt_id.size(); i++) {
		if(dt_id[i] == id) return (char*)dt_table[i];
	}
	sprintf(undef_id, "<UID: 0x%x>", id);
	return undef_id;
}

